                                   _         _     _      
             _ __ ___   __ _ _ __ | | ___   (_) __| | ___ 
            | '_ ` _ \ / _` | '_ \| |/ _ \  | |/ _` |/ _ \
            | | | | | | (_| | |_) | |  __/  | | (_| |  __/
            |_| |_| |_|\__,_| .__/|_|\___|  |_|\__,_|\___|
                            |_|                              
                                                by leaflabs!


maple-ide is a graphical programming environment for the Maple development
board developed by LeafLabs. It is a modified version of the popular open
source Arduino environment targeted towards the ARM Cortex-M3 microcontroller
in the Maple; the regular arduino toolchain is only targeted towards the Atmel
series of AVR microcontrollers. 

This is the source code repository for the maple-ide; if you just want to
program your Maple board you probably want to download a binary release 
package for your particular platform. The latest version of this repository
can be found at: http://github.com/leaflabs/maple-ide

This IDE includes a full ARM compiler toolchain ("arm-none-eabi-gcc") and a low
level library for the STM32 Cortex-M3 plaform called libmaple. libmaple is 
developed seperately and can be used straight from the command line; it is
available at: http://github.com/leaflabs/libmaple

 
Disclaimer
------------------------------------------------------------------------------
We make no claims that we "preserve" any design or strategy behind arduino,
which is why this being released as a separate branch of arduino and not as a
patch. Arduino is clearly organized around compiling to AVR, and compiling to
ARM is a hack. In the future we hope that the arduino compilation and upload
infrastructure will be generalized so that boards like the Maple which require
a non-AVR compiler can be developed for in the regular IDE by installing a
plugin or library.


Build Requirements
------------------------------------------------------------------------------
NOTE: there are seperate requirements to actually compile and upload
      sketches using the environment; these are just the tools needed
      to build the Java user interface.

A number of file archives are not included in this repository and must be 
downloaded and copied in seperately to build for a given platform:

    avr_tools.zip           ./build/windows/avr_tools.zip
    jre.tgz                 ./build/linux/jre.tgz
    jre.zip                 ./build/windows/jre.zip
    reference.zip           ./build/shared/reference.zip
    template.dmg.gz         ./build/macosx/template.dmg.gz
    tools-universal.zip     ./build/macosx/dist/tools-universal.zip

Linux build requirements:
 - a reasonable development environment (tar, perl, gzip, etc)
 - A java 1.5+ environment with javac on the path 

Mac OSX build requirements:
 - TODO

Windows build requirements:
 - a cygwin build environment (see the arduino build docs)
 - TODO

Notes on RXTX
------------------------------------------------------------------------------
We have recompiled the RXTX Java libraries for linux so that they will detect
ACM devices. We took the rxtx-2.2pre2 source code and simply added a "ttyACM"
prefix entry everywhere we found a "ttyUSB" entry. We also disabled printer
port support (this reduces the jar file size?):

    $ ./configure  --disable-PRINTER
    $ make

Changes from stock arduino codebase
------------------------------------------------------------------------------
 * removed all Eclipse project cruft
 * hardware/leaflabs directory, including bootloader/ and core/
 * app/src/processing/app/Base.java: add getArmBasePath
 * app/src/processing/app/Sketch.java: imports, compiler/uploader selection
 * app/src/processing/app/debug/Sizer.java: don't try to size make builds
 * app/src/processing/app/debug/DFUUploader.java: new dfu-util uploader
 * app/src/processing/app/debug/Compiler.java: expose a couple methods
 * app/src/processing/app/debug/ArmCompiler.java: new, extends Compiler
 * build/macosx/dist/Arduino.app/Contents/Resources/processing.icns,
   build/shared/lib: UI skin and preferences
 * build/*/dist/*: dist files broken out into external zip downloads
 * build/*/*sh: make files are heavily modified
 * build/shared/examples/Maple: Maple-specific examples

TODO
------------------------------------------------------------------------------
 * Entire compile/release/upload toolchain for windows and OSX
 * Port or replace extension libraries 
 * Include link to documentation for porting AVR sketches to ARM in the
   compiler error output to minize confusion if a user tries to compile an
   incompatible AVR sketch

